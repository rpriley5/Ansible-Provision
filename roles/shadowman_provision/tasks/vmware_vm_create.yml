---
- name: Read hosts.txt and create a list of VM names
  ansible.builtin.set_fact:
    vm_names_test: "{{ lookup('file', 'files/hosts.txt').splitlines() }}"

- name: Show the list of VM names
  ansible.builtin.debug:
    var: vm_names_test

- name: Check whether hostname is used already in hosts.txt
  community.vmware.vmware_vm_info:
    vm_name: "{{ item }}"
    validate_certs: false
  loop: "{{ vm_names_test }}"
  register: hostname_output
  ignore_errors: true

- name: Create list based on hostnames that don't exist yet
  ansible.builtin.set_fact:
    blahblahblah: "{{ [(hostname_output['results'] | selectattr('failed', 'equalto', true) | map(attribute='item') | list) | first] }}"

- name: Debug;
  ansible.builtin.debug:
    var: vm_names

# - name: Change facts if running Windows
#   ansible.builtin.set_fact:
#     operating_system_tag: "Windows"
#   when: operating_system is match("Win.*")

# - name: Create and run Linux VM
#   community.vmware.vmware_guest:
#     cluster: '{{ cluster_id }}'
#     datastore: '{{ datastore_id }}'
#     folder: '{{ folder_id }}'
#     datacenter: "Shadowman-DC"
#     name: "{{ item }}"
#     state: "{{ state }}"
#     template: "{{ source_vm_id }}"
#     wait_for_ip_address: true
#     validate_certs: false
#   loop: "{{ vm_names }}"
#   when: operating_system is match("RHEL.*")
#   register: async_results
#   async: 1000
#   poll: 0

# - name: Check RHEL VM Creation status
#   ansible.builtin.async_status:
#     jid: "{{ async_result_item.ansible_job_id }}"
#   loop: "{{ async_results.results }}"
#   loop_control:
#     loop_var: "async_result_item"
#   when: operating_system is match("RHEL.*")
#   register: async_poll_results
#   until: async_poll_results.finished
#   retries: 100
#   delay: 10

# - name: Create and run Windows VM
#   community.vmware.vmware_guest:
#     cluster: '{{ cluster_id }}'
#     datastore: '{{ datastore_id }}'
#     folder: '{{ folder_id }}'
#     datacenter: "Shadowman-DC"
#     name: "{{ item }}"
#     state: "{{ state }}"
#     template: "{{ source_vm_id }}"
#     validate_certs: false
#     networks:
#       - name: LAN01
#         start_connected: true
#         connected: true
#     customization:
#       domain: ad.shadowman.dev
#       autologon: true
#       autologoncount: 1
#       hostname: "{{ item.split('.')[0] }}"
#       productid: "{{ productid }}"
#       password: "{{ windowspassword }}"
#       runonce:
#         - powershell.exe -ExecutionPolicy ByPass -File C:\Windows\Temp\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert
#   loop: "{{ vm_names }}"
#   when: operating_system is match("Win.*")
#   register: async_results
#   async: 1000
#   poll: 0

# - name: Check Windows VM Creation status
#   ansible.builtin.async_status:
#     jid: "{{ async_result_item.ansible_job_id }}"
#   loop: "{{ async_results.results }}"
#   loop_control:
#     loop_var: "async_result_item"
#   when: operating_system is match("Win.*")
#   register: async_poll_results
#   until: async_poll_results.finished
#   retries: 100
#   delay: 10

# - name: Ensure Tags are created
#   community.vmware.vmware_tag:
#     category_id: "{{ item.category_id }}"
#     tag_name: "{{ item.name }}"
#     state: present
#     validate_certs: false
#   loop:
#     - { name: "{{ env | default('dev') }}", category_id: 'urn:vmomi:InventoryServiceCategory:4d358ccf-dbca-4fc8-8600-3e88ec1e09ff:GLOBAL' }
#     - { name: "{{ owner | default('shadowman') }}", category_id: 'urn:vmomi:InventoryServiceCategory:1e759721-5b8c-4bc5-8550-ca042a4818b0:GLOBAL' }

# - name: Assign Tags
#   community.vmware.vmware_tag_manager:
#     tag_names:
#       - tag: "{{ operating_system_tag }}"
#         category: operating_system
#       - tag: "{{ env | default('dev') }}"
#         category: environment
#       - tag: "{{ owner | default('shadowman') }}"
#         category: owner
#       - tag: ansible_managed
#         category: purpose
#     object_name: "{{ item }}"
#     object_type: VirtualMachine
#     state: add
#     validate_certs: false
#   loop: "{{ vm_names }}"

...
